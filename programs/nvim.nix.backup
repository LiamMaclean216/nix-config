{ config, pkgs, lib, ... }:

{
  programs.nvf = {
    enable = true;

    settings = {
      vim = {
        viAlias = true;
        vimAlias = true;

        # Prevent swapfiles and other settings
        preventJunkFiles = true;

        # ============================================
        # Core Editor Options
        # ============================================
        options = {
          swapfile = false;
          laststatus = 3;
          relativenumber = true;
          number = true;
          clipboard = "unnamedplus";
          timeoutlen = 300;
          guifont = "FiraCode Nerd Font:h10";
        };

        # ============================================
        # Language Support
        # ============================================
        languages = {
          enableFormat = true;
          enableTreesitter = true;
          enableLSP = true;
          enableExtraDiagnostics = true;

          # Python
          python = {
            enable = true;
            lsp = {
              enable = true;
              server = "pyright";
            };
            format = {
              enable = true;
              type = "ruff";
            };
            treesitter.enable = true;
          };

          # TypeScript/JavaScript
          ts = {
            enable = true;
            lsp = {
              enable = true;
              server = "ts_ls";
            };
            format.enable = false;  # prettier not available in nvf
            treesitter.enable = true;
          };

          # Lua
          lua = {
            enable = true;
            lsp = {
              enable = true;
            };
            format.enable = true;
            treesitter.enable = true;
          };

          # HTML
          html = {
            enable = true;
            treesitter.enable = true;
          };

          # CSS
          css = {
            enable = true;
            lsp.enable = true;
            treesitter.enable = true;
            format.enable = false;  # prettier not available in nvf
          };

          # Tailwind
          tailwind.enable = true;

          # Nix
          nix = {
            enable = true;
            lsp.enable = true;
            format.enable = true;
            treesitter.enable = true;
          };

          # Markdown
          markdown = {
            enable = true;
            treesitter.enable = true;
          };

          # YAML
          yaml = {
            enable = true;
            treesitter.enable = true;
          };
        };

        # ============================================
        # Treesitter Configuration
        # ============================================
        treesitter = {
          enable = true;
          fold = false;
          grammars = [
            pkgs.vimPlugins.nvim-treesitter.builtGrammars.htmldjango
          ];
        };

        # ============================================
        # LSP Configuration
        # ============================================
        lsp = {
          enable = true;
          formatOnSave = false;
          lspSignature.enable = false;
        };

        # ============================================
        # UI Plugins
        # ============================================
        ui = {
          # Bufferline
          breadcrumbs.enable = false;

          borders = {
            enable = true;
            globalStyle = "rounded";
          };

          noice = {
            enable = true;
          };

          illuminate.enable = true;
        };

        # Status line
        statusline = {
          lualine = {
            enable = true;
            theme = "auto";
          };
        };

        # Tab line / Buffer line
        tabline = {
          nvimBufferline = {
            enable = true;
          };
        };

        # File tree
        filetree = {
          neo-tree = {
            enable = true;
          };
        };

        # Telescope
        telescope = {
          enable = true;
        };

        # Notifications
        notify = {
          nvim-notify = {
            enable = true;
          };
        };

        # Git integration
        git = {
          enable = true;
          gitsigns.enable = true;
        };

        # Which-key
        binds = {
          whichKey.enable = true;
        };

        # Comments
        comments = {
          comment-nvim.enable = true;
        };

        # Snippets
        snippets = {
          luasnip.enable = true;
        };

        # ============================================
        # Terminal
        # ============================================
        terminal = {
          toggleterm = {
            enable = true;
          };
        };

        # ============================================
        # Utility Plugins
        # ============================================
        utility = {
          # Surround
          surround.enable = true;

          # Diffview
          diffview-nvim.enable = true;

          # Preview
          preview = {
            glow = {
              enable = true;
            };
          };
        };

        # ============================================
        # Custom Plugins via Lazy Loading
        # ============================================
        lazy = {
          enable = true;

          plugins = {
            # Supermaven AI completion
            supermaven-nvim = {
              package = pkgs.vimPlugins.supermaven-nvim;
              setupModule = "supermaven-nvim";
              setupOpts = {};
              event = ["BufEnter"];
            };

            # Melange colorscheme
            melange-nvim = {
              package = pkgs.vimPlugins.melange-nvim;
              lazy = false;
              after = ''
                vim.cmd("colorscheme melange")
              '';
            };

            # Git blame (note: package name uses dot not hyphen)
            "git-blame.nvim" = {
              package = pkgs.vimPlugins.git-blame-nvim;
              event = [{event = "User"; pattern = "LazyFile";}];
              setupModule = "gitblame";
              setupOpts = {
                enabled = true;
                message_template = " <summary> • <date> • <author> • <<sha>>";
                date_format = "%m-%d-%Y %H:%M:%S";
                virtual_text_column = 1;
              };
            };

            # Lazygit integration
            "lazygit.nvim" = {
              package = pkgs.vimPlugins.lazygit-nvim;
              cmd = ["LazyGit"];
              after = ''
                require("telescope").load_extension("lazygit")
              '';
            };

            # Grug-far (search/replace)
            "grug-far.nvim" = {
              package = pkgs.vimPlugins.grug-far-nvim;
              cmd = ["GrugFar"];
            };

            # Snacks terminal
            "snacks.nvim" = {
              package = pkgs.vimPlugins.snacks-nvim;
              lazy = false;
              setupModule = "snacks";
              setupOpts = {
                terminal = {
                  win = {
                    height = 0.30;
                  };
                };
              };
            };

            # Noice configuration (already enabled in ui.noice)
            "noice.nvim" = {
              package = pkgs.vimPlugins.noice-nvim;
              lazy = false;
              after = ''
                local noice_opts = require("noice").setup({
                  routes = {
                    {
                      filter = {
                        event = "notify",
                        find = "No information available",
                      },
                      opts = { skip = true },
                    },
                  },
                  commands = {
                    all = {
                      view = "split",
                      opts = { enter = true, format = "details" },
                      filter = {},
                    },
                  },
                  presets = {
                    lsp_doc_border = true,
                  },
                })
              '';
            };
          };
        };

        # ============================================
        # Custom Lua Configuration
        # ============================================
        luaConfigRC = {
          # Neovide settings
          neovide-settings = {
            order = 1;
            value = ''
              -- Neovide specific settings
              vim.g.neovide_cursor_animation_length = 0
              vim.g.neovide_cursor_trail_length = 0
              vim.g.neovide_scroll_animation_length = 0
              vim.g.neovide_refresh_rate = 144
            '';
          };

          # Telescope configuration
          telescope-config = {
            order = 50;
            value = ''
              local telescope = require('telescope')
              local actions = require('telescope.actions')

              telescope.setup({
                defaults = {
                  mappings = {
                    i = {
                      ["<esc>"] = actions.close,
                    },
                    n = {
                      ["<esc>"] = actions.close,
                    },
                  },
                  file_ignore_patterns = {
                    ".git/",
                    "node_modules",
                    "__pycache__",
                    ".pytest_cache",
                    ".venv",
                    "venv",
                    "dist",
                    "build",
                    "target",
                    ".cache",
                    "%.o",
                    "%.a",
                    "%.out",
                    "%.class",
                    "%.pdf",
                    ".vscode",
                    ".idea",
                  },
                  vimgrep_arguments = {
                    "rg",
                    "--color=never",
                    "--no-heading",
                    "--with-filename",
                    "--line-number",
                    "--column",
                    "--smart-case",
                    "--glob=!node_modules/**",
                    "--glob=!.git/**",
                    "--glob=!**/__pycache__/**",
                    "--glob=!**/.pytest_cache/**",
                    "--glob=!**/venv/**",
                    "--glob=!**/.venv/**",
                  },
                },
              })
            '';
          };

          # Custom utility functions (embedded)
          custom-functions = {
            order = 10;
            value = ''
              -- Custom utility functions from keymap_funcs.lua
              local M = {}

              local languages = {
                "lua", "python", "javascript", "typescript", "markdown",
                "json", "toml", "yaml", "sh", "html", "htmldjango",
                "dockerfile", "css", "scss", "javascriptreact", "typescriptreact",
                "svelte", "vue", "java", "nix",
              }

              function EnterNormalMode()
                vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<Esc>", true, true, true), "n", true)
              end

              function GetCodeWindows()
                local code_windows = {}
                for _, win_id in ipairs(vim.api.nvim_list_wins()) do
                  if IsCodeWindow(win_id) then
                    table.insert(code_windows, win_id)
                  end
                end
                return code_windows
              end

              function SelectFirstWindow()
                local code_windows = GetCodeWindows()
                if #code_windows > 0 then
                  vim.api.nvim_set_current_win(code_windows[1])
                end
              end

              function OpenVSplitRight(select)
                if select == nil then select = true end
                SelectFirstWindow()
                local code_windows = GetCodeWindows()
                if #code_windows == 1 then
                  vim.cmd("vsplit")
                  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<Esc>", true, true, true), "n", true)
                  if vim.fn.len(vim.fn.getbufinfo({ buflisted = 1 })) > 1 then
                    vim.cmd("b#")
                  end
                elseif #code_windows > 1 then
                  local rightmost_win = code_windows[#code_windows]
                  if select then vim.api.nvim_set_current_win(rightmost_win) end
                end
              end

              function M.CloseAllNonCode()
                local windows = vim.api.nvim_list_wins()
                for _, win in ipairs(windows) do
                  if not IsCodeWindow(win) then
                    pcall(vim.api.nvim_win_close, win, true)
                  end
                end
              end

              function IsCodeWindow(win)
                local status, fileType = pcall(function()
                  return string.lower(vim.api.nvim_buf_get_option(vim.api.nvim_win_get_buf(win), "filetype"))
                end)
                if not status then return false end
                return vim.tbl_contains(languages, fileType)
              end

              function M.CloseAllExceptCurrent()
                local current_win = vim.api.nvim_get_current_win()
                local windows = vim.api.nvim_list_wins()
                pcall(function()
                  for _, win in ipairs(windows) do
                    if win ~= current_win then
                      vim.api.nvim_win_close(win, true)
                    end
                  end
                end)
              end

              function M.CloseHiddenBuffers()
                local open_buffers = {}
                for _, win in ipairs(vim.api.nvim_list_wins()) do
                  local buf = vim.api.nvim_win_get_buf(win)
                  open_buffers[buf] = true
                end
                for _, buf in ipairs(vim.api.nvim_list_bufs()) do
                  if vim.api.nvim_buf_is_valid(buf) and vim.api.nvim_buf_get_option(buf, "buflisted") then
                    if not open_buffers[buf] then
                      vim.api.nvim_buf_delete(buf, {})
                    end
                  end
                end
              end

              function M.OpenClaudeTerminal(file_reference)
                M.CloseAllExceptCurrent()
                local code_windows = GetCodeWindows()
                if #code_windows == 0 then return end

                local claude_term_params = {
                  esc_esc = true,
                  ctrl_hjkl = false,
                  win = { position = "right", width = 0.33 },
                }
                local terminal_command = "claude"

                local term = Snacks.terminal.get(terminal_command, claude_term_params)
                if term and term.win and vim.api.nvim_win_is_valid(term.win) then
                  vim.api.nvim_set_current_win(term.win)
                  if file_reference then
                    vim.fn.feedkeys("@" .. file_reference .. " ")
                  end
                else
                  Snacks.terminal(terminal_command, claude_term_params)
                  if file_reference then
                    vim.defer_fn(function()
                      vim.fn.feedkeys("@" .. file_reference .. " ")
                    end, 100)
                  end
                end
              end

              _G.Funcs = M
              return M
            '';
          };

          # Global function definitions
          global-functions = {
            order = 11;
            value = ''
              -- Font size adjustment for Neovide
              local function adjust_font_size(delta)
                local current_font = vim.o.guifont
                local font_name, font_size = current_font:match("^(.*):h(%d+)$")

                if font_name and font_size then
                  font_size = tonumber(font_size) + delta
                  vim.o.guifont = string.format("%s:h%d", font_name, font_size)
                  print(vim.o.guifont)
                else
                  vim.o.guifont = string.format("FiraCode Nerd Font:h%d", 14 + delta)
                end
              end

              -- Make globally available
              _G.adjust_font_size = adjust_font_size
              _G.SelectFirstWindow = SelectFirstWindow
              _G.OpenVSplitRight = OpenVSplitRight
            '';
          };

          # Autocommands
          autocmds = {
            order = 80;
            value = ''
              -- Don't continue comments automatically
              vim.api.nvim_create_autocmd("BufEnter", {
                callback = function()
                  vim.opt.formatoptions:remove("o")
                end,
              })

              -- Pyright Python path configuration
              vim.api.nvim_create_autocmd("LspAttach", {
                callback = function(args)
                  local client = vim.lsp.get_client_by_id(args.data.client_id)
                  if client and client.name == "pyright" then
                    vim.schedule(function()
                      vim.cmd("PyrightSetPythonPath ~/.venv/bin/python")
                    end)
                  end
                end,
              })
            '';
          };

          # Snacks configuration
          snacks-config = {
            order = 70;
            value = ''
              -- Configure Snacks for terminal handling
              _G.Snacks = require("snacks")
            '';
          };

          # Django LSP setup
          django-lsp = {
            order = 60;
            value = ''
              -- Configure djlsp for Django templates
              require('lspconfig').djlsp.setup({
                filetypes = { "htmldjango", "django" },
                root_dir = function(fname)
                  return require('lspconfig.util').root_pattern("manage.py", ".git")(fname)
                end,
              })
            '';
          };

          # Complex keymaps that require Lua functions
          complex-keymaps = {
            order = 90;
            value = ''
              -- Terminal keymaps (using Snacks)
              vim.keymap.set("n", "<C-g>", function()
                Snacks.terminal("lazygit", {
                  esc_esc = true,
                  ctrl_hjkl = false,
                  win = {
                    position = "float",
                    width = 0.8,
                    height = 0.8,
                  },
                })
              end, { desc = "Lazygit" })

              vim.keymap.set("n", "<C-e>", function()
                Snacks.terminal("codex", {
                  esc_esc = true,
                  ctrl_hjkl = false,
                  win = {
                    position = "float",
                    width = 0.8,
                    height = 0.8,
                  },
                })
              end, { desc = "Codex" })

              vim.keymap.set("n", "<C-v>", function()
                Snacks.terminal("lazydocker", {
                  esc_esc = true,
                  ctrl_hjkl = false,
                  win = {
                    position = "float",
                    width = 0.8,
                    height = 0.8,
                  },
                })
              end, { desc = "Lazydocker" })

              -- Claude Code terminal keymaps
              vim.keymap.set("n", "<C-c>", function()
                Funcs.OpenClaudeTerminal()
              end, { desc = "Claude Code" })

              vim.keymap.set("n", "<C-S-c>", function()
                Funcs.OpenClaudeTerminal(vim.fn.expand("%"))
              end, { desc = "Claude Code with current file" })

              -- Terminal toggle (all modes)
              local all_modes = { "n", "i", "v", "t", "c", "s" }

              vim.keymap.set(all_modes, "<C-/>", function()
                Snacks.terminal(nil, {
                  esc_esc = true,
                  ctrl_hjkl = false,
                  win = {
                    position = "bottom",
                    height = 0.30,
                  },
                })
              end, { desc = "Terminal Bottom" })

              -- Window/buffer management keymaps
              local opts = { noremap = true, silent = true }

              vim.keymap.set(all_modes, "<C-k>", "<Esc><Cmd>lua Funcs.CloseAllNonCode()<CR>", opts)
              vim.keymap.set(all_modes, "<C-S-k>", "<Esc><Cmd>lua Funcs.CloseAllExceptCurrent()<CR>", opts)
              vim.keymap.set(all_modes, "<C-w>", ":bdelete<CR>", vim.tbl_extend("force", opts, { nowait = true }))
              vim.keymap.set(all_modes, "<C-S-w>", "<Esc><Cmd>lua Funcs.CloseHiddenBuffers()<CR>", opts)

              vim.keymap.set(all_modes, "<C-1>", "<Esc><Cmd>lua SelectFirstWindow()<CR>", opts)
              vim.keymap.set(all_modes, "<C-2>", "<Esc><Cmd>lua OpenVSplitRight()<CR>", opts)

              -- Smart paste in different modes
              vim.keymap.set(all_modes, "<C-S-v>", function()
                local mode = vim.fn.mode()
                if mode == "i" then
                  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<C-r>+", true, false, true), "n", false)
                elseif mode == "t" then
                  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes('<C-\\><C-n>"+pi', true, false, true), "n", false)
                else
                  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes('"+p', true, false, true), "n", false)
                end
              end, opts)
            '';
          };
        };

        # ============================================
        # Keymaps
        # ============================================
        maps = {
          normal = {
            # Navigation
            "n" = {
              action = "nzzzv";
              silent = true;
            };
            "N" = {
              action = "Nzzzv";
              silent = true;
            };
            "<C-u>" = {
              action = "<C-u>zz";
              silent = true;
            };
            "<leader>p" = {
              action = "\"_dp";
              silent = true;
            };
            "<C-a>" = {
              action = "ggVG";
              silent = true;
            };

            # Telescope
            "<C-p>" = {
              action = "<Cmd>Telescope find_files<CR>";
              silent = true;
            };
            "<C-f>" = {
              action = "<Cmd>Telescope live_grep<CR>";
              silent = true;
            };

            # Font size
            "<C-+>" = {
              lua = true;
              action = "adjust_font_size(1)";
              desc = "Increase font size";
            };
            "<C-->" = {
              lua = true;
              action = "adjust_font_size(-1)";
              desc = "Decrease font size";
            };

            # Buffer navigation
            "<C-l>" = {
              action = ":bnext<CR>";
              silent = true;
            };
            "<C-h>" = {
              action = ":bprevious<CR>";
              silent = true;
            };

            # LSP
            "<F2>" = {
              action = "<cmd>lua vim.lsp.buf.rename()<CR>";
              silent = true;
            };
            "<A-S-f>" = {
              action = ":lua vim.lsp.buf.format()<CR>";
              silent = true;
            };

            # Move lines
            "<A-up>" = {
              action = ":m .-2<cr>==";
              silent = true;
            };
            "<A-down>" = {
              action = ":m .+1<cr>==";
              silent = true;
            };

            # Comments (handled by commentary plugin now)
            "<C-Q>" = {
              action = ":Commentary<CR>";
              silent = true;
            };
          };

          visual = {
            # Disable undo in visual mode
            "u" = {
              action = "<Nop>";
              silent = true;
            };

            # Move lines
            "<A-up>" = {
              action = ":m '<-2<cr>gv=gv";
              silent = true;
            };
            "<A-down>" = {
              action = ":m '>+1<cr>gv=gv";
              silent = true;
            };

            # Comments
            "<C-Q>" = {
              action = ":Commentary<CR>";
              silent = true;
            };
            "q" = {
              action = ":Commentary<CR>";
              silent = true;
            };
          };

          insert = {
            # Comments
            "<C-Q>" = {
              action = "<Esc>:Commentary<CR>";
              silent = true;
            };
          };
        };

      };
    };
  };

  # ============================================
  # Extra Packages
  # ============================================
  home.packages = with pkgs; [
    # Required for some LSPs and formatters
    python312Packages.debugpy
    nodePackages.stylelint
    nodePackages.svelte-language-server
    nodePackages.prettier
    hadolint
  ];
}
